Types of Materialization
    -Table: Model is rebuilt as a table on each run
        - Fast to query but slow to build and not updated automatically
    -View: Model is rebuilt as a view on each run
        - Quick to build and automatically updates but slow to query
    -Incremental: Only new or updated records added to table on each run
        - Quick build time but can have advanced configuration
        - Good for data that is stored in event-like fashion
    -Ephemeral: Temporary tables are created but not added into the database
        - Reuseable logic for multiple models

Changing the materialization of a model can be done by adding this to the top of the model 
{{ config(materialized='{type_of_materialization}', unique_key='{key_value}') }}

or by setting the default materalization in the dbt_project.yml file

models:
  learn_dbt:
    # Config indicated by + and applies to all files under models/example/
    example:
      +materialized: {type_of_materialization}

Variables
    -Can be accessed from the dbt models

Built-in Tests
    - not null: making sure the value is not null
    - unique: making sure that the value is unique
    - accepted_values: specify which values are accepted and the response if they are not
        -good to use for expected string values
    - relationships: making sure that the value from one model matches the value in another model

Custom Tests
    - Can be added to the tests folder (will run as long as this folder is part of the path in
    the dbt_project.yml file. Ex: test-paths: ["tests"]
    - Application:
        -Verify exact row with exact value
        -When aggregating data that is is in a certain range
        -Only a certain percent of missing values

Running dbt
    dbt run --models example
        Command to run all models in the example directory
    dbt run --models dates
        Command to run all models called dates
    dbt run --models example.dates
        Command to run dates model in example dir
    dbt run --models example.dates example.my_first_dbt_model
        Command to run multiple specific models
    dbt run --m new
        Command to run models in new directory

Setting up dbt cloud
    - Create an account and add the user/password for the admin snowflake account
    - Go to settings > analytics and configure your snowflake connection with the information
    from your profiles.yml section
    - Configure the repository
        -Copy the deploy key in github > settings > deploy key and add the key and give write status